from flask import Flask, request, jsonify
from flask_cors import CORS
from supabase import create_client, Client
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app, resources={
    r"/api/*": {
        "origins": ["http://localhost:5173"],
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type"]
    }
})

# Initialize Supabase client
try:
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")
    
    if not supabase_url or not supabase_key:
        raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set in .env file")
        
    supabase: Client = create_client(supabase_url, supabase_key)
except Exception as e:
    print(f"Error initializing Supabase client: {str(e)}")
    raise

# Routes
@app.route("/api/vendors", methods=['GET', 'POST'])
def handle_vendors():
    if request.method == 'GET':
        try:
            response = supabase.table('vendors').select("*").order('created_at.desc').execute()
            return jsonify(response.data)
        except Exception as e:
            print(f"Error fetching vendors: {str(e)}")
            return jsonify({"error": str(e)}), 500
    elif request.method == 'POST':
        try:
            data = request.get_json()
            response = supabase.table('vendors').insert({
                "name": data['name'],
                "website": data.get('website')
            }).execute()
            return jsonify(response.data[0]), 201
        except Exception as e:
            print(f"Error creating vendor: {str(e)}")
            return jsonify({"error": str(e)}), 500

@app.route("/api/software", methods=['GET', 'POST'])
def handle_software():
    if request.method == 'GET':
        try:
            response = supabase.table('software').select(
                "*,vendors(id,name,website)"
            ).execute()
            return jsonify([{
                **item,
                "vendor_name": item["vendors"]["name"] if item.get("vendors") else None
            } for item in response.data])
        except Exception as e:
            print(f"Error fetching software: {str(e)}")
            return jsonify({"error": str(e)}), 500
    elif request.method == 'POST':
        try:
            data = request.get_json()
            response = supabase.table('software').insert({
                "name": data['name'],
                "vendor_id": data['vendor_id'],
                "version": data.get('version')
            }).execute()
            return jsonify(response.data[0]), 201
        except Exception as e:
            print(f"Error creating software: {str(e)}")
            return jsonify({"error": str(e)}), 500

#@app.route("/api/vulnerabilities", methods=['GET', 'POST'])
@app.route("/api/vulnerabilities", methods=["GET", "POST", "DELETE"])
def handle_vulnerabilities():
    if request.method == "GET":
        vuln_res = supabase.table("vulnerabilities").select("*").order("published", desc=True).execute()
        software_res = supabase.table("software").select("*").execute()
        vendor_res = supabase.table("vendors").select("*").execute()

        software_map = {s["id"]: s for s in (software_res.data or [])}
        vendor_map = {v["id"]: v for v in (vendor_res.data or [])}

        vulnerabilities = []
        for vuln in vuln_res.data or []:
            software = software_map.get(vuln.get("software_id"), {})
            vendor = vendor_map.get(software.get("vendor_id")) if software else {}

            vulnerabilities.append({
                "id": vuln.get("id"),
                "cve_id": vuln.get("cve_id"),
                "cvss_score": vuln.get("cvss_score"),
                "summary": vuln.get("summary"),
                "severity": vuln.get("severity"),
                "published": vuln.get("published"),
                "software": {
                    "id": software.get("id"),
                    "name": software.get("name"),
                    "version": software.get("version"),
                    "vendor": {
                        "id": vendor.get("id"),
                        "name": vendor.get("name"),
                        "website": vendor.get("website"),
                    } if vendor else None
                }
            })

        return jsonify(vulnerabilities)
      #  except Exception as e:
        #    print(f"Error fetching vulnerabilities: {str(e)}")
       #     return jsonify({"error": str(e)}), 500
    elif request.method == 'POST':
        try:
            data = request.get_json()
            response = supabase.table('vulnerabilities').insert({
                "software_id": data['software_id'],
                "cve_id": data['cve_id'],
                "cvss_score": data.get('cvss_score'),
                "summary": data.get('summary'),
                "severity": data.get('severity'),
                "published": data.get('published')
            }).execute()
            return jsonify(response.data[0]), 201
        except Exception as e:
            print(f"Error creating vulnerability: {str(e)}")
            return jsonify({"error": str(e)}), 500

@app.route("/api/threats", methods=['GET', 'POST'])
#@app.route("/api/threats", methods=['GET', 'POST'])
def handle_threats():
    if request.method == "GET":
        try:
            threat_res = supabase.table("threats").select("*").order("created_at", desc=True).execute()
            threat_type_res = supabase.table("threat_types").select("*").execute()
            vuln_threat_res = supabase.table("vulnerability_threats").select("*").execute()
            vuln_res = supabase.table("vulnerabilities").select("*").execute()
            software_res = supabase.table("software").select("*").execute()
            vendor_res = supabase.table("vendors").select("*").execute()

            # Create mapping dictionaries
            threat_type_map = {tt["id"]: tt for tt in (threat_type_res.data or [])}
            vuln_map = {v["id"]: v for v in (vuln_res.data or [])}
            software_map = {s["id"]: s for s in (software_res.data or [])}
            vendor_map = {v["id"]: v for v in (vendor_res.data or [])}

            # Map vulnerabilities to threats
            threat_vuln_map = {}
            for vt in vuln_threat_res.data or []:
                threat_id = vt.get("threat_id")
                vuln_id = vt.get("vulnerability_id")
                if threat_id not in threat_vuln_map:
                    threat_vuln_map[threat_id] = []
                threat_vuln_map[threat_id].append(vuln_map.get(vuln_id))

            threats = []
            for threat in threat_res.data or []:
                threat_type = threat_type_map.get(threat.get("threat_type_id"), {})
                vulnerabilities = []
                for vuln in threat_vuln_map.get(threat["id"], []):
                    if not vuln:
                        continue
                    software = software_map.get(vuln.get("software_id"), {})
                    vendor = vendor_map.get(software.get("vendor_id")) if software else {}
                    vulnerabilities.append({
                        "id": vuln.get("id"),
                        "cve_id": vuln.get("cve_id"),
                        "summary": vuln.get("summary"),
                        "severity": vuln.get("severity"),
                        "cvss_score": vuln.get("cvss_score"),
                        "software": {
                            "id": software.get("id"),
                            "name": software.get("name"),
                            "version": software.get("version"),
                            "vendor": {
                                "id": vendor.get("id"),
                                "name": vendor.get("name"),
                                "website": vendor.get("website")
                            } if vendor else None
                        }
                    })

                threats.append({
                    "id": threat.get("id"),
                    "name": threat.get("name"),
                    "description": threat.get("description"),
                    "threat_type_name": threat_type.get("name", "Unknown Type"),
                    "threat_type_description": threat_type.get("description", ""),
                    "vulnerabilities": vulnerabilities
                })

            return jsonify(threats)
        except Exception as e:
            print(f"Error fetching threats: {str(e)}")
            return jsonify({"error": str(e)}), 500

    elif request.method == "POST":
        try:
            data = request.get_json()
            response = supabase.table("threats").insert({
                "name": data['name'],
                "description": data.get('description'),
                "threat_type_id": data.get('threat_type_id')
            }).execute()
            return jsonify(response.data[0]), 201
        except Exception as e:
            print(f"Error creating threat: {str(e)}")
            return jsonify({"error": str(e)}), 500
@app.route("/api/threat-types", methods=['GET', 'POST'])
def handle_threat_types():
    if request.method == 'GET':
        try:
            response = supabase.table('threat_types').select("*").execute()
            return jsonify(response.data)
        except Exception as e:
            print(f"Error fetching threat types: {str(e)}")
            return jsonify({"error": str(e)}), 500
    elif request.method == 'POST':
        try:
            data = request.get_json()
            response = supabase.table('threat_types').insert({
                "name": data['name'],
                "description": data.get('description')
            }).execute()
            return jsonify(response.data[0]), 201
        except Exception as e:
            print(f"Error creating threat type: {str(e)}")
            return jsonify({"error": str(e)}), 500

@app.route("/api/patches", methods=['GET', 'POST'])
def handle_patches():
    if request.method == 'GET':
        try:
            # Fetch patches with related data
            response = supabase.table('patches').select("""
                id,
                url,
                released,
                vulnerability:vulnerabilities(
                    id,
                    cve_id,
                    cvss_score,
                    summary,
                    severity,
                    published,
                    software:software_id(
                        id,
                        name,
                        version,
                        vendor:vendor_id(
                            id,
                            name,
                            website
                        )
                    )
                )
            """).execute()
            
            patches = []
            for patch in response.data:
                vulnerability = patch.get('vulnerability', {})
                software = vulnerability.get('software', {}) if vulnerability else {}
                vendor = software.get('vendor', {}) if software else {}
                
                formatted_patch = {
                    'id': patch.get('id'),
                    'url': patch.get('url'),
                    'released': patch.get('released'),
                    'vulnerability': {
                        'id': vulnerability.get('id'),
                        'cve_id': vulnerability.get('cve_id'),
                        'cvss_score': vulnerability.get('cvss_score'),
                        'summary': vulnerability.get('summary'),
                        'severity': vulnerability.get('severity'),
                        'published': vulnerability.get('published'),
                        'software': {
                            'id': software.get('id'),
                            'name': software.get('name'),
                            'version': software.get('version'),
                            'vendor': vendor
                        } if software else None
                    } if vulnerability else None
                }
                patches.append(formatted_patch)
            
            print("Formatted Patches:", patches)  # Debug log
            return jsonify(patches)
        except Exception as e:
            print(f"Error fetching patches: {str(e)}")
            return jsonify({"error": str(e)}), 500
            
    elif request.method == 'POST':
        try:
            data = request.get_json()
            response = supabase.table('patches').insert({
                "vulnerability_id": data['vulnerability_id'],
                "url": data['url'],
                "released": data.get('released')
            }).execute()
            return jsonify(response.data[0]), 201
        except Exception as e:
            print(f"Error creating patch: {str(e)}")
            return jsonify({"error": str(e)}), 500

                # Check if we have any software
                software_check = supabase.table('software').select("*").limit(1).execute()
                if not software_check.data:
                    # Add test software
                    software = supabase.table('software').insert({
                        "name": "Test Software",
                        "vendor_id": vendor_id,
                        "version": "1.0.0"
                    }).execute()
                    software_id = software.data[0]['id']
                else:
                    software_id = software_check.data[0]['id']

                # Check if we have any vulnerabilities
                vuln_check = supabase.table('vulnerabilities').select("*").limit(1).execute()
                if not vuln_check.data:
                    # Add test vulnerability
                    vuln = supabase.table('vulnerabilities').insert({
                        "software_id": software_id,
                        "cve_id": "CVE-2023-TEST",
                        "cvss_score": 7.5,
                        "summary": "Test vulnerability",
                        "severity": "High",
                        "published": "2023-10-03"
                    }).execute()
                    vuln_id = vuln.data[0]['id']
                else:
                    vuln_id = vuln_check.data[0]['id']

                # Check if we have any patches
                patch_check = supabase.table('patches').select("*").limit(1).execute()
                if not patch_check.data:
                    # Add test patch
                    supabase.table('patches').insert({
                        "vulnerability_id": vuln_id,
                        "url": "https://test-patch.com",
                        "released": "2023-10-03"
                    }).execute()

            except Exception as e:
                print("Error inserting test data:", str(e))

            # Now fetch the patches with all related data
            response = supabase.table('patches').select(
                """
                *,
                vulnerabilities!vulnerability_id (
                    id,
                    cve_id,
                    cvss_score,
                    summary,
                    severity,
                    published,
                    software:software_id (
                        id,
                        name,
                        version,
                        vendor:vendor_id (
                            id,
                            name,
                            website
                        )
                    )
                )
                """
            ).execute()
            
            # Transform the data to proper structure
            patches = []
            for patch in response.data:
                vulnerability_data = patch.get('vulnerabilities', {})
                software_data = vulnerability_data.get('software', {}) if vulnerability_data else {}
                vendor_data = software_data.get('vendor', {}) if software_data else {}
                
                formatted_patch = {
                    'id': patch.get('id'),
                    'url': patch.get('url'),
                    'released': patch.get('released'),
                    'vulnerability': {
                        'id': vulnerability_data.get('id'),
                        'cve_id': vulnerability_data.get('cve_id'),
                        'cvss_score': vulnerability_data.get('cvss_score'),
                        'summary': vulnerability_data.get('summary'),
                        'severity': vulnerability_data.get('severity'),
                        'published': vulnerability_data.get('published'),
                        'software': {
                            'id': software_data.get('id'),
                            'name': software_data.get('name'),
                            'version': software_data.get('version'),
                            'vendor': {
                                'id': vendor_data.get('id'),
                                'name': vendor_data.get('name'),
                                'website': vendor_data.get('website')
                            } if vendor_data else None
                        } if software_data else None
                    } if vulnerability_data else None
                }
                patches.append(formatted_patch)
            
            print("Formatted Patches:", patches)
            return jsonify(patches)
            
            # Transform the data to match the expected structure
            patches = []
            for patch in response.data:
                vulnerability = patch.get('vulnerabilities', {})
                software = vulnerability.get('software', {}) if vulnerability else {}
                vendor = software.get('vendors', {}) if software else {}
                
                formatted_patch = {
                    'id': patch.get('id'),
                    'url': patch.get('url'),
                    'released': patch.get('released'),
                    'vulnerability': {
                        'id': vulnerability.get('id'),
                        'cve_id': vulnerability.get('cve_id'),
                        'cvss_score': vulnerability.get('cvss_score'),
                        'summary': vulnerability.get('summary'),
                        'severity': vulnerability.get('severity'),
                        'published': vulnerability.get('published'),
                        'software': {
                            'id': software.get('id'),
                            'name': software.get('name'),
                            'version': software.get('version'),
                            'vendor': {
                                'id': vendor.get('id'),
                                'name': vendor.get('name'),
                                'website': vendor.get('website')
                            } if vendor else None
                        } if software else None
                    } if vulnerability else None
                }
                patches.append(formatted_patch)
            
            print("Formatted Patches:", patches)  # Debug print
            return jsonify(patches)

            patches = []
            for patch in response.data:
                vuln = patch.get("vulnerability") or {}
                software = vuln.get("software") or {}
                vendor = software.get("vendor") or {}

                # Construct properly nested object
                transformed_patch = {
                    "id": patch["id"],
                    "url": patch.get("url"),
                    "released": patch.get("released"),
                    "vulnerability": {
                        "id": vuln.get("id"),
                        "cve_id": vuln.get("cve_id"),
                        "summary": vuln.get("summary"),
                        "severity": vuln.get("severity"),
                        "cvss_score": vuln.get("cvss_score"),
                        "software": {
                            "id": software.get("id"),
                            "name": software.get("name"),
                            "version": software.get("version"),
                            "vendor": {
                                "id": vendor.get("id"),
                                "name": vendor.get("name"),
                                "website": vendor.get("website")
                            } if vendor else None
                        } if software else None
                    } if vuln else None
                }
                patches.append(transformed_patch)

            return jsonify(patches)
        except Exception as e:
            print(f"Error fetching patches: {str(e)}")
            return jsonify({"error": str(e)}), 500

    elif request.method == 'POST':
        try:
            data = request.get_json()
            response = supabase.table('patches').insert({
                "vulnerability_id": data['vulnerability_id'],
                "url": data['url'],
                "released": data.get('released')
            }).execute()

            # Return nested structure for newly created patch
            patch = response.data[0]
            vuln_res = supabase.table('vulnerabilities').select(
                """
                *,
                software:software_id(
                    *,
                    vendor:vendor_id(*)
                )
                """
            ).eq("id", patch["vulnerability_id"]).single().execute()
            vuln = vuln_res.data
            software = vuln.get("software") if vuln else {}
            vendor = software.get("vendor") if software else {}

            transformed_patch = {
                "id": patch["id"],
                "url": patch.get("url"),
                "released": patch.get("released"),
                "vulnerability": {
                    "id": vuln.get("id") if vuln else None,
                    "cve_id": vuln.get("cve_id") if vuln else None,
                    "summary": vuln.get("summary") if vuln else None,
                    "severity": vuln.get("severity") if vuln else None,
                    "cvss_score": vuln.get("cvss_score") if vuln else None,
                    "software": {
                        "id": software.get("id"),
                        "name": software.get("name"),
                        "version": software.get("version"),
                        "vendor": {
                            "id": vendor.get("id"),
                            "name": vendor.get("name"),
                            "website": vendor.get("website")
                        } if vendor else None
                    } if software else None
                } if vuln else None
            }

            return jsonify(transformed_patch), 201
        except Exception as e:
            print(f"Error creating patch: {str(e)}")
            return jsonify({"error": str(e)}), 500


@app.route("/api/vulnerabilities/<int:vuln_id>/threats", methods=['POST'])
def link_vulnerability_threat(vuln_id):
    try:
        data = request.get_json()
        response = supabase.table('vulnerability_threats').insert({
            "vulnerability_id": vuln_id,
            "threat_id": data['threat_id']
        }).execute()
        return jsonify(response.data[0]), 201
    except Exception as e:
        print(f"Error linking vulnerability to threat: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/health")
def health():
    try:
        # Test Supabase connection by fetching a single row from vendors
        supabase.table('vendors').select("*").limit(1).execute()
        return {"status": "ok", "db": "connected"}
    except Exception as e:
        return {"status": "error", "details": str(e)}, 500

if __name__ == "__main__":
    app.run(debug=True)